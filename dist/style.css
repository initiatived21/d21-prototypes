@charset "UTF-8";
/*------------------------------------*    Aleut is a fork of [inuit.css](http://inuitcss.com/)
    This is starter where we import all the packages from aleut into this style-sheet.
    These files we can not change. However these are heavily based on SCSS variables, so we can change
    these by supplying the specific SCSS-variable before we import each SCSS-file.
    By default most of aleut is turned off, so we need to turn on each class via variables before importing.
    We have structured the CSS in a specific way to avoid specificity-problems.
    Basically we are first targetting elements without class-names etc,
    then we are applying abstract patterns before we apply most of our own styles and
    in the end helper-classes and layouts that should overwrite everything else..
    All classes are also have namespaces. This means that you by looking at the prefix-of the class can
    see where it is located and whether you can modify the file or not.
    Read http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/ for more information
\*------------------------------------*/
/*------------------------------------*    #SETTINGS
    Global variables, site-wide settings, config switches, etc.
    These are just for SCSS â€“ nothing here gets compiled to CSS directly
\*------------------------------------*/
/*------------------------------------*    #VARS
    Our own variables to use throughout the project.
\*------------------------------------*/
/**
 * COLORS
 * We always specify colors throughout our SCSS from these variables.
 * Never use darken() etc. other places than here.
 * If you need to rename a Variable don't be afraid to do a global
 * find and replace in the CSS so that the variables are correct
 */
/**
 * RESPONSIVE BREAKPOINTS
 * This is where we define all our breakpoints. It overwrites https://github.com/aleutcss/settings.responsive
 * These also generate helper-classes with aleut that we can use:
 * f.ex: u-1/2@m (for width), u-pt@s(for padding-top on s-size) etc.
 * See all alternatives in https://github.com/aleutcss/utilities.spacing-responsive and
 * utilities.widths-responsive.
 *
 * We can also use them with a media-query mixin like this:
 * Usage:
 *  @include media-query(s) {
 *
 *  }
 */
/**
 * Other vars here
 **/
/*------------------------------------*    #TOOLS
    Site-wide mixins and functions.
    These are just for SCSS - nothing here gets directly compiled to CSS.
\*------------------------------------*/
/*------------------------------------*    #CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 *
 */
/*------------------------------------*    #GENERIC
    Low-specificity, far-reaching rulesets (e.g. resets).
    Here we have our basic resets
\*------------------------------------*/
/*! normalize.css v4.0.0 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block; }

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * Change font properties to `inherit` in all browsers (opinionated).
 */
button,
input,
select,
textarea {
  font: inherit; }

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold; }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 * 2. Show the overflow in Edge, Firefox, and IE.
 */
button,
input,
select {
  /* 2 */
  overflow: visible; }

/**
 * Remove the margin in Safari.
 * 1. Remove the margin in Firefox and Safari.
 */
button,
input,
select,
textarea {
  /* 1 */
  margin: 0; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Change the cursor in all browsers (opinionated).
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  cursor: pointer; }

/**
 * Restore the default cursor to disabled elements unset by the previous rule.
 */
[disabled] {
  cursor: default; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
input:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * Correct the odd appearance of search inputs in Chrome and Safari.
 */
[type="search"] {
  -webkit-appearance: textfield; }

/**
 * Remove the inner padding and cancel buttons in Chrome on OS X and
 * Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/*------------------------------------*    #RESET
\*------------------------------------*/
/**
 * As well as using normalize.css, it is often advantageous to remove all
 * margins from certain elements.
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/*------------------------------------*    #BOX-SIZING
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

*, *:before, *:after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit; }

/*------------------------------------*    #BASE
    Unclassed HTML elements (e.g. a {}, blockquote {}, address {}).
    Here we style all our HTML-elements with the basic styling we want.
	https://github.com/aleutcss?query=base
\*------------------------------------*/
/*------------------------------------*    #PAGE
\*------------------------------------*/
/**
 * High-, page-level styling.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward â€˜jumpsâ€™ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [1] */
  background-color: #fff;
  color: #333;
  overflow-y: scroll;
  /* [2] */
  min-height: 100%;
  /* [3] */
  -webkit-text-size-adjust: 100%;
  /* [4] */
  -ms-text-size-adjust: 100%;
  /* [4] */
  -moz-osx-font-smoothing: grayscale;
  /* [5] */
  -webkit-font-smoothing: antialiased;
  /* [5] */ }

/*------------------------------------*    #IMAGES
\*------------------------------------*/
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, letâ€™s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  max-width: none; }

/*------------------------------------*    #LISTS
\*------------------------------------*/
/**
 * Remove extra vertical spacing when nesting lists.
 */
li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*    #HEADINGS
\*------------------------------------*/
/**
 * Headings 1â€“6.
 */
h1 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

h2 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h3 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h4 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h5 {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

h6 {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/*------------------------------------*    #OBJECTS (o-prefix)
    Objects, abstractions, and design patterns (e.g. .o-media {}).
    Here we import abstractions without styling etc.
    Missing some abstractions? Read trough the SCSS-files imported to turn
    on variables or get new ones from here:
    https://github.com/aleutcss?query=objects.
\*------------------------------------*/
/*------------------------------------*    #BOX
\*------------------------------------*/
/**
 * The box object simply boxes off content.
 */
/**
 * 1. So we can apply the `.box` class to naturally-inline elements.
 */
.o-box {
  display: block;
  /* [1] */
  padding: 24px; }
  .o-box::after {
    content: "";
    display: table;
    clear: both; }
  .o-box > :last-child {
    margin-bottom: 0; }

/**
     * Small box.
     */
.o-box--small {
  padding: 12px; }

/*------------------------------------*    #BUTTONS
\*------------------------------------*/
/**
 * A simple button object.
 */
/**
 * 1. Allow us to style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Make buttons inherit font styles (often necessary when styling `input`s as
 *    buttons).
 * 4. Reset/normalize some styles.
 * 5. Force all button-styled elements to appear clickable.
 * 6. Fixes odd inner spacing in IE7.
 * 7. Subtract the border size from the padding value so that buttons do not
 *    grow larger as we add borders.
 */
.o-btn {
  display: inline-block;
  /* [1] */
  vertical-align: middle;
  /* [2] */
  font: inherit;
  /* [3] */
  text-align: center;
  /* [4] */
  margin: 0;
  /* [4] */
  cursor: pointer;
  /* [5] */
  overflow: visible;
  /* [6] */
  padding: 11px 23px;
  /* [7] */
  background-color: #4a8ec2;
  border: 1px solid #4a8ec2; }
  .o-btn, .o-btn:hover, .o-btn:active, .o-btn:focus {
    text-decoration: none;
    /* [4] */
    color: white; }

/**
 * Fix a Firefox bug whereby `input type="submit"` gains 2px extra padding.
 */
.o-btn::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
     * Small buttons.
     */
.o-btn--small {
  padding: 5px 11px;
  /* [7] */ }

/**
     * Round-ended buttons.
     *
     * 1. Overly-large value to ensure the radius rounds the whole end of the
     *    button.
     */
.o-btn--pill {
  border-radius: 100px;
  /* [1] */ }

/*------------------------------------*    #LAYOUT
\*------------------------------------*/
/**
 * The aleutcss layout system uses `box-sizing: border-box;` and
 * `display: inline-block;` to create an extremely powerful, flexible
 * alternative to the traditional grid system. Combine the layout items with
 * the widths found in `trumps.widths`.
 */
/**
 * Begin a layout group.
 */
.o-layout {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -24px; }

/**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
.o-layout__item {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
  -webkit-box-sizing: border-box;
  /* [5] */
  -moz-box-sizing: border-box;
  /* [5] */
  box-sizing: border-box;
  /* [5] */ }

/**
     * Make the layout items fill up from the center outward.
     */
.o-layout--center {
  text-align: center; }
  .o-layout--center > .o-layout__item {
    text-align: left; }

/*------------------------------------*    #LIST-BARE
\*------------------------------------*/
/**
 * The list-bare object simply removes any indents and bullet points from lists.
 */
.o-list-bare {
  margin: 0;
  padding: 0;
  list-style: none; }

/*------------------------------------*    #LIST-INLINE
\*------------------------------------*/
/**
 * The list-inline object simply displays a list of items in one line.
 */
.o-list-inline {
  margin: 0;
  padding: 0;
  list-style: none; }
  .o-list-inline > li {
    display: inline-block; }

/*------------------------------------*    #MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 */
.o-media {
  display: block; }
  .o-media::after {
    content: "";
    display: table;
    clear: both; }

.o-media__img {
  float: left;
  margin-right: 24px; }
  .o-media__img > img {
    display: block; }

.o-media__body {
  overflow: hidden;
  display: block; }
  .o-media__body,
  .o-media__body > :last-child {
    margin-bottom: 0; }

.o-wrapper {
  margin: 0 auto;
  max-width: 1100px;
  padding-left: 12px;
  padding-right: 12px; }
  @media screen and (min-width: 45em) {
    .o-wrapper {
      padding-left: 24px;
      padding-right: 24px; } }

/*------------------------------------*    #VENDOR
    Third party CSS for plugins etc.
\*------------------------------------*/
/*------------------------------------*    #COMPONENTS (c-prefix)
    Discrete, complete chunks of UI (e.g. `.c-carousel {}`).
    This is the one layer that aleutcss doesnâ€™t get involved with.
    Here you place your own visual styling.
\*------------------------------------*/
.c-site-nav__link {
  color: #333;
  padding-left: 12px;
  padding-right: 12px;
  text-decoration: none; }

.c-footer > .o-wrapper {
  background-color: #767676; }

.c-tag-list__item {
  background-color: #082; }

.c-tag-list__link {
  color: #fff;
  display: inline-block;
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4;
  font-weight: normal;
  padding: 1.5px 6px;
  text-decoration: none; }

.c-pledge {
  border: 1px solid #333; }

.c-pledge__initiator-title {
  text-transform: uppercase; }

.c-pledge__initiator-name {
  text-transform: uppercase; }

.c-pledge__text {
  color: #767676;
  font-weight: bold; }
  .c-pledge__text:before {
    content: open-quote; }
  .c-pledge__text:after {
    content: close-quote; }

.c-pledge__days {
  color: #c00;
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

/*------------------------------------*    #Utilities (u-prefix)
    High-specificity, very explicit selectors. Overrides and helper classes (e.g. .u-hidden {})
    Helpers and layout-classes
	https://github.com/aleutcss?query=utilities
\*------------------------------------*/
/*------------------------------------*    #CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * If you need clearfix on other classes use the clearfix-mixin in the same way as here:
 */
.u-clearfix::after {
  content: "";
  display: table;
  clear: both; }

/*------------------------------------*    #HEADINGS
\*------------------------------------*/
/**
 * Headings 1â€“6â€™s corresponding Greek-alphabet abstract classes for double-
 * stranded heading hierarchy: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * Use these helper classes to cause other elements to adopt the styling of the
 * respective heading, e.g.:
 *
   <h2 class="u-alpha">Lorem ipsum</h2>
 *
 */
.u-alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

.u-beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

.u-gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

.u-delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

.u-epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

.u-zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/*------------------------------------*    #PRINT
\*------------------------------------*/
/**
 * Very crude, reset-like styles taken from the HTML5 Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/3c3c5e64604209a4d63e1e4c48dd245d45fadfd9/css/main.css#L200-L234
 */
@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    /* Black prints faster: h5bp.com/s */
    box-shadow: none !important;
    text-shadow: none !important; }
  a,
  a:visited {
    text-decoration: underline; }
  a[href]:after {
    content: " (" attr(href) ")"; }
  abbr[title]:after {
    content: " (" attr(title) ")"; }
  /**
     * Donâ€™t show links that are fragment identifiers, or use the `javascript:`
     * pseudo protocol.
     */
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: ""; } }

/*------------------------------------*    #SPACING
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.u-(m|p)(t|r|b|l|h|v)(-negative)(-tiny|-small|-large|-huge|-none) {}`
 * = margin/padding top/right/bottom/left/horizontal/vertical negative tiny/small/large/huge/none

 	<div class="u-mr u-mb-small"></div>
 */
/**
     * Padding helper classes.
     *
     * Add paddings.
     */
.u-p {
  padding: 24px !important; }

.u-pt {
  padding-top: 24px !important; }

.u-pr {
  padding-right: 24px !important; }

.u-pb {
  padding-bottom: 24px !important; }

.u-pl {
  padding-left: 24px !important; }

.u-ph {
  padding-right: 24px !important;
  padding-left: 24px !important; }

.u-pv {
  padding-top: 24px !important;
  padding-bottom: 24px !important; }

/*------------------------------------*    #SPACING-RESPONSIVE
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.u-(m|p)(t|r|b|l|h|v)(-negative)(-tiny|-small|-large|-huge|-none)(@breakpoint) {}`
 * = margin/padding top/right/bottom/left/horizontal/vertical negative tiny/small/large/huge/none @breakpoint
 *
	<div class="u-mr u-mb-small u-mb@s"></div>
 */
/*------------------------------------*    #WIDTHS
\*------------------------------------*/
/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes can take a fraction-like format (e.g. `.u-2/3`) or a spoken-
 * word format (e.g. `.u-2-of-3`). Use these in your markup:
 *
 * <div class="u-7/12">
 */
.u-1\/1 {
  width: 100% !important; }

.u-1\/2 {
  width: 50% !important; }

.u-1\/3 {
  width: 33.33333% !important; }

.u-2\/3 {
  width: 66.66667% !important; }

.u-1\/4 {
  width: 25% !important; }

.u-2\/4 {
  width: 50% !important; }

.u-3\/4 {
  width: 75% !important; }

.u-1\/5 {
  width: 20% !important; }

.u-2\/5 {
  width: 40% !important; }

.u-3\/5 {
  width: 60% !important; }

.u-4\/5 {
  width: 80% !important; }

/*------------------------------------*    #WIDTHS-RESPONSIVE
\*------------------------------------*/
/**
 * Widths-responsive loops through the breakpoints defined in settings.responsive to generate prefixed breakpoint-based classes. If you are
 using inuitcssâ€™ default breakpoints, you will be given classes like
 `u-1/4@lap-and-up`, etc. Usage:

 <div class="o-layout">
 	<div class="o-layout__item u-1/1 u-1/2@lap-and-up">Foo</div><!--
 --><div class="o-layout__item u-1/1 u-1/2@lap-and-up">Bar</div>
 </div>

 */
@media screen and (max-width: 44.9375em) {
  .u-1\/1\@s {
    width: 100% !important; }
  .u-1\/2\@s {
    width: 50% !important; }
  .u-1\/3\@s {
    width: 33.33333% !important; }
  .u-2\/3\@s {
    width: 66.66667% !important; }
  .u-1\/4\@s {
    width: 25% !important; }
  .u-2\/4\@s {
    width: 50% !important; }
  .u-3\/4\@s {
    width: 75% !important; }
  .u-1\/5\@s {
    width: 20% !important; }
  .u-2\/5\@s {
    width: 40% !important; }
  .u-3\/5\@s {
    width: 60% !important; }
  .u-4\/5\@s {
    width: 80% !important; } }

@media screen and (min-width: 45em) {
  .u-1\/1\@m {
    width: 100% !important; }
  .u-1\/2\@m {
    width: 50% !important; }
  .u-1\/3\@m {
    width: 33.33333% !important; }
  .u-2\/3\@m {
    width: 66.66667% !important; }
  .u-1\/4\@m {
    width: 25% !important; }
  .u-2\/4\@m {
    width: 50% !important; }
  .u-3\/4\@m {
    width: 75% !important; }
  .u-1\/5\@m {
    width: 20% !important; }
  .u-2\/5\@m {
    width: 40% !important; }
  .u-3\/5\@m {
    width: 60% !important; }
  .u-4\/5\@m {
    width: 80% !important; } }

@media screen and (min-width: 64em) {
  .u-1\/1\@l {
    width: 100% !important; }
  .u-1\/2\@l {
    width: 50% !important; }
  .u-1\/3\@l {
    width: 33.33333% !important; }
  .u-2\/3\@l {
    width: 66.66667% !important; }
  .u-1\/4\@l {
    width: 25% !important; }
  .u-2\/4\@l {
    width: 50% !important; }
  .u-3\/4\@l {
    width: 75% !important; }
  .u-1\/5\@l {
    width: 20% !important; }
  .u-2\/5\@l {
    width: 40% !important; }
  .u-3\/5\@l {
    width: 60% !important; }
  .u-4\/5\@l {
    width: 80% !important; } }

@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
  .u-1\/1\@retina {
    width: 100% !important; }
  .u-1\/2\@retina {
    width: 50% !important; }
  .u-1\/3\@retina {
    width: 33.33333% !important; }
  .u-2\/3\@retina {
    width: 66.66667% !important; }
  .u-1\/4\@retina {
    width: 25% !important; }
  .u-2\/4\@retina {
    width: 50% !important; }
  .u-3\/4\@retina {
    width: 75% !important; }
  .u-1\/5\@retina {
    width: 20% !important; }
  .u-2\/5\@retina {
    width: 40% !important; }
  .u-3\/5\@retina {
    width: 60% !important; }
  .u-4\/5\@retina {
    width: 80% !important; } }

/**
 * Helper-class for removing item visually, but not for screenreaders
 */
.u-accessibility {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important; }

/**
 * Floating left. Remember to add clearfix class on parent item: .u-clearfix
 */
.u-fl {
  float: left; }

/**
 * Floating right. Remember to add clearfix class on parent item: .u-clearfix
 */
.u-fr {
  float: right; }

/**
 * If we don't want to wrap the text over multiple lines.
 */
.u-nowrap {
  white-space: nowrap; }

/**
 * Text align helper classes.
 */
.u-tr {
  text-align: right; }

.u-tc {
  text-align: center; }

.u-tl {
  text-align: left; }
